/*
 * This file is generated by jOOQ.
 */
package manager.task.domians.tables


import java.time.LocalDate

import manager.task.domians.Public
import manager.task.domians.keys.FIRSTKEY
import manager.task.domians.tables.records.FilmsRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row6
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.types.DayToSecond


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Films(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, FilmsRecord>?,
    aliased: Table<FilmsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<FilmsRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.films</code>
         */
        val FILMS: Films = Films()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<FilmsRecord> = FilmsRecord::class.java

    /**
     * The column <code>public.films.code</code>.
     */
    val CODE: TableField<FilmsRecord, String?> = createField(DSL.name("code"), SQLDataType.CHAR(5).nullable(false), this, "")

    /**
     * The column <code>public.films.title</code>.
     */
    val TITLE: TableField<FilmsRecord, String?> = createField(DSL.name("title"), SQLDataType.VARCHAR(40).nullable(false), this, "")

    /**
     * The column <code>public.films.did</code>.
     */
    val DID: TableField<FilmsRecord, Int?> = createField(DSL.name("did"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.films.date_prod</code>.
     */
    val DATE_PROD: TableField<FilmsRecord, LocalDate?> = createField(DSL.name("date_prod"), SQLDataType.LOCALDATE, this, "")

    /**
     * The column <code>public.films.kind</code>.
     */
    val KIND: TableField<FilmsRecord, String?> = createField(DSL.name("kind"), SQLDataType.VARCHAR(10), this, "")

    /**
     * The column <code>public.films.len</code>.
     */
    val LEN: TableField<FilmsRecord, DayToSecond?> = createField(DSL.name("len"), SQLDataType.INTERVALDAYTOSECOND, this, "")

    private constructor(alias: Name, aliased: Table<FilmsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<FilmsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.films</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.films</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.films</code> table reference
     */
    constructor(): this(DSL.name("films"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, FilmsRecord>): this(Internal.createPathAlias(child, key), child, key, FILMS, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<FilmsRecord> = FIRSTKEY
    override fun `as`(alias: String): Films = Films(DSL.name(alias), this)
    override fun `as`(alias: Name): Films = Films(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Films = Films(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Films = Films(name, null)

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row6<String?, String?, Int?, LocalDate?, String?, DayToSecond?> = super.fieldsRow() as Row6<String?, String?, Int?, LocalDate?, String?, DayToSecond?>
}

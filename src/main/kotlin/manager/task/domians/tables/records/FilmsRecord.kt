/*
 * This file is generated by jOOQ.
 */
package manager.task.domians.tables.records


import java.time.LocalDate

import manager.task.domians.tables.Films

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.types.DayToSecond


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class FilmsRecord() : UpdatableRecordImpl<FilmsRecord>(Films.FILMS), Record6<String?, String?, Int?, LocalDate?, String?, DayToSecond?> {

    var code: String?
        set(value): FilmsRecord = set(0, value)
        get(): String? = get(0) as String?

    var title: String?
        set(value): FilmsRecord = set(1, value)
        get(): String? = get(1) as String?

    var did: Int?
        set(value): FilmsRecord = set(2, value)
        get(): Int? = get(2) as Int?

    var dateProd: LocalDate?
        set(value): FilmsRecord = set(3, value)
        get(): LocalDate? = get(3) as LocalDate?

    var kind: String?
        set(value): FilmsRecord = set(4, value)
        get(): String? = get(4) as String?

    var len: DayToSecond?
        set(value): FilmsRecord = set(5, value)
        get(): DayToSecond? = get(5) as DayToSecond?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row6<String?, String?, Int?, LocalDate?, String?, DayToSecond?> = super.fieldsRow() as Row6<String?, String?, Int?, LocalDate?, String?, DayToSecond?>
    override fun valuesRow(): Row6<String?, String?, Int?, LocalDate?, String?, DayToSecond?> = super.valuesRow() as Row6<String?, String?, Int?, LocalDate?, String?, DayToSecond?>
    override fun field1(): Field<String?> = Films.FILMS.CODE
    override fun field2(): Field<String?> = Films.FILMS.TITLE
    override fun field3(): Field<Int?> = Films.FILMS.DID
    override fun field4(): Field<LocalDate?> = Films.FILMS.DATE_PROD
    override fun field5(): Field<String?> = Films.FILMS.KIND
    override fun field6(): Field<DayToSecond?> = Films.FILMS.LEN
    override fun component1(): String? = code
    override fun component2(): String? = title
    override fun component3(): Int? = did
    override fun component4(): LocalDate? = dateProd
    override fun component5(): String? = kind
    override fun component6(): DayToSecond? = len
    override fun value1(): String? = code
    override fun value2(): String? = title
    override fun value3(): Int? = did
    override fun value4(): LocalDate? = dateProd
    override fun value5(): String? = kind
    override fun value6(): DayToSecond? = len

    override fun value1(value: String?): FilmsRecord {
        this.code = value
        return this
    }

    override fun value2(value: String?): FilmsRecord {
        this.title = value
        return this
    }

    override fun value3(value: Int?): FilmsRecord {
        this.did = value
        return this
    }

    override fun value4(value: LocalDate?): FilmsRecord {
        this.dateProd = value
        return this
    }

    override fun value5(value: String?): FilmsRecord {
        this.kind = value
        return this
    }

    override fun value6(value: DayToSecond?): FilmsRecord {
        this.len = value
        return this
    }

    override fun values(value1: String?, value2: String?, value3: Int?, value4: LocalDate?, value5: String?, value6: DayToSecond?): FilmsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    /**
     * Create a detached, initialised FilmsRecord
     */
    constructor(code: String? = null, title: String? = null, did: Int? = null, dateProd: LocalDate? = null, kind: String? = null, len: DayToSecond? = null): this() {
        this.code = code
        this.title = title
        this.did = did
        this.dateProd = dateProd
        this.kind = kind
        this.len = len
    }

    /**
     * Create a detached, initialised FilmsRecord
     */
    constructor(value: manager.task.domians.tables.pojos.Films?): this() {
        if (value != null) {
            this.code = value.code
            this.title = value.title
            this.did = value.did
            this.dateProd = value.dateProd
            this.kind = value.kind
            this.len = value.len
        }
    }
}
